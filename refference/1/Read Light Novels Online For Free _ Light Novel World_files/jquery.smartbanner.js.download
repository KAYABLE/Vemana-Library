(function (root, factory) {
    if (typeof define == 'function' && define.amd) {
        define(['jquery'], factory);
    } else {
        factory(root.jQuery);
    }
})(this, function ($) {
    var UA = navigator.userAgent;

    var MobileAppBanner = function (options) {
        this.origHtmlMargin = parseFloat($('html').css('margin-top'));
        this.options = $.extend({}, $.mobileappbanner.defaults, options);
        var standalone = navigator.standalone;
        if (UA.match(/Android/i) !== null) {
            this.type = 'android';
        }
        if (!this.type || standalone || this.getCookie('lnmobapp-closed') || this.getCookie('lnmobapp-installed')) {
            return;
        }
        this.scale = this.options.scale == 'auto' ? $(window).width() / window.screen.width : this.options.scale;
        if (this.scale < 1) {
            this.scale = 1;
        }

        this.title = this.options.title;
        
        if (typeof this.options.onInstall == 'function') {
            this.options.onInstall = this.options.onInstall;
        } else {
            this.options.onInstall = function () { };
        }
        if (typeof this.options.onClose == 'function') {
            this.options.onClose = this.options.onClose;
        } else {
            this.options.onClose = function () { };
        }
        this.create();
        this.show();
        this.listen();
    };

    MobileAppBanner.prototype = {

        constructor: MobileAppBanner,

        create: function () {
            var iconURL;

            var link = this.options.url;
            
            var banner = (
                '<div id="mobileappbanner" class="' + this.type + '">' +
                '<div class="sb-container">' +
                '<a href="#" class="sb-close">&times;</a>' +
                '<span class="sb-icon"></span>' +
                '<div class="sb-info">' +
                '<strong>' + this.title + '</strong>' +
                '<span>Android Mobile App Available!</span>' +
                '</div>' +
                '<a href="' + link + '" class="sb-button" target="_blank" rel="nofollow noopener" >' +
                '<span>' + this.options.button + '</span>' +
                '</a>' +
                '</div>' +
                '</div>'
            );
            if (this.options.layer) {
                $(this.options.appendToSelector).append(banner);
            } else {
                $(this.options.appendToSelector).prepend(banner);
            }

            iconURL = this.options.icon;

            if (iconURL) {
                $('#mobileappbanner .sb-icon').css('background-image', 'url(' + iconURL + ')');
            } else {
                $('#mobileappbanner').addClass('no-icon');
            }
            this.bannerHeight = $('#mobileappbanner').outerHeight() + 2;

            if (this.scale > 1) {
                $('#mobileappbanner')
                    .css('top', parseFloat($('#mobileappbanner').css('top')) * this.scale)
                    .css('height', parseFloat($('#mobileappbanner').css('height')) * this.scale)
                    .hide();
                $('#mobileappbanner .sb-container')
                    .css('-webkit-transform', 'scale(' + this.scale + ')')
                    .css('-msie-transform', 'scale(' + this.scale + ')')
                    .css('-moz-transform', 'scale(' + this.scale + ')')
                    .css('width', $(window).width() / this.scale);
            }
            $('#mobileappbanner')
                .css('position', this.options.layer ? 'fixed' : 'static');
        },

        listen: function () {
            $('#mobileappbanner .sb-close').on('click', $.proxy(this.close, this));
            $('#mobileappbanner .sb-button').on('click', $.proxy(this.install, this));
        },

        show: function (callback) {
            var banner = $('#mobileappbanner');
            banner.stop();

            if (this.options.layer) {
                banner
                    .animate({ top: 0, display: 'block' }, this.options.speedIn)
                    .addClass('shown')
                    .show();
                $(this.pushSelector)
                    .animate({
                        paddingTop: this.origHtmlMargin + (this.bannerHeight * this.scale)
                    }, this.options.speedIn, 'swing', callback);
            }
            else {
                if ($.support.transition) {
                    banner.animate({ top: 0 }, this.options.speedIn).addClass('shown');
                    var transitionCallback = function () {
                        $('html').removeClass('sb-animation');
                        if (callback) {
                            callback();
                        }
                    };
                    $(this.pushSelector)
                        .addClass('sb-animation')
                        .one($.support.transition.end, transitionCallback)
                        .emulateTransitionEnd(this.options.speedIn)
                        .css('margin-top', this.origHtmlMargin + (this.bannerHeight * this.scale));
                }
                else {
                    banner
                        .slideDown(this.options.speedIn)
                        .addClass('shown');
                }
            }
        },

        hide: function (callback) {
            var banner = $('#mobileappbanner');
            banner.stop();

            if (this.options.layer) {
                banner.animate({
                    top: -1 * this.bannerHeight * this.scale,
                    display: 'block'
                }, this.options.speedIn)
                    .removeClass('shown');

                $(this.pushSelector)
                    .animate({
                        paddingTop: this.origHtmlMargin
                    }, this.options.speedIn, 'swing', callback);
            }
            else {
                if ($.support.transition) {
                    if (this.type !== 'android') {
                        banner
                            .css('top', -1 * this.bannerHeight * this.scale)
                            .removeClass('shown');
                    }
                    else {
                        banner
                            .css({ display: 'none' })
                            .removeClass('shown');
                    }
                    var transitionCallback = function () {
                        $('html').removeClass('sb-animation');
                        if (callback) {
                            callback();
                        }
                    };
                    $(this.pushSelector)
                        .addClass('sb-animation')
                        .one($.support.transition.end, transitionCallback)
                        .emulateTransitionEnd(this.options.speedOut)
                        .css('margin-top', this.origHtmlMargin);
                }
                else {
                    banner.slideUp(this.options.speedOut).removeClass('shown');
                }
            }
        },

        close: function (e) {
            e.preventDefault();
            this.hide();
            this.setCookie('lnmobapp-closed', 'true', this.options.daysHidden);
            this.options.onClose(e);
        },

        install: function (e) {
            if (this.options.hideOnInstall) {
                this.hide();
            }
            this.setCookie('lnmobapp-installed', 'true', this.options.daysReminder);
            this.options.onInstall(e);
        },

        setCookie: function (name, value, exdays) {
            var exdate = new Date();
            exdate.setDate(exdate.getDate() + exdays);
            value = encodeURI(value) + ((exdays == null) ? '' : '; expires=' + exdate.toUTCString());
            document.cookie = name + '=' + value + '; path=/;';
        },

        getCookie: function (name) {
            var i, x, y, ARRcookies = document.cookie.split(';');
            for (i = 0; i < ARRcookies.length; i++) {
                x = ARRcookies[i].substr(0, ARRcookies[i].indexOf('='));
                y = ARRcookies[i].substr(ARRcookies[i].indexOf('=') + 1);
                x = x.replace(/^\s+|\s+$/g, '');
                if (x == name) {
                    return decodeURI(y);
                }
            }
            return null;
        },
    };

    $.mobileappbanner = function (option) {
        var $window = $(window);
        var data = $window.data('mobileappbanner');
        var options = typeof option == 'object' && option;
        if (!data) {
            $window.data('mobileappbanner', (data = new MobileAppBanner(options)));
        }
        if (typeof option == 'string') {
            data[option]();
        }
    };

    $.mobileappbanner.defaults = {
        title: "Light Novel Cave: Online/Offline Story Reader", // What the title of the app should be in the banner (defaults to <title>)
        icon: "https://static.lncave.app/content/img/light-novel-cave-applogo.png", // The URL of the icon (defaults to <meta name="apple-touch-icon">)
        button: 'VIEW', // Text for the install button
        url: "https://lncave.app", // The URL for the button. Keep null if you want the button to link to the app store.
        scale: 'auto', // Scale based on viewport size (set to 1 to disable)
        speedIn: 300, // Show animation speed of the banner
        speedOut: 400, // Close animation speed of the banner
        daysHidden: 3, // Duration to hide the banner after being closed (0 = always show banner)
        daysReminder: 3, // Duration to hide the banner after "VIEW" is clicked *separate from when the close button is clicked* (0 = always show banner)
        hideOnInstall: true, // Hide the banner after "VIEW" is clicked.
        layer: true, // Display as overlay layer or slide down the page
        appendToSelector: 'body', //Append the banner to a specific selector
        pushSelector: 'html' // What element is going to push the site content down; this is where the banner append animation will start.
    };

    $.mobileappbanner.Constructor = MobileAppBanner;

    function transitionEnd() {
        var el = document.createElement('mobileappbanner');

        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        };

        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return { end: transEndEventNames[name] };
            }
        }
        return false;
    }
    if ($.support.transition !== undefined) {
        return;
    }

    // http://blog.alexmaccaw.com/css-transitions
    $.fn.emulateTransitionEnd = function (duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function () {
            called = true;
        });
        var callback = function () {
            if (!called) {
                $($el).trigger($.support.transition.end);
            }
        };
        setTimeout(callback, duration);
        return this;
    };

    $(function () {
        $.support.transition = transitionEnd();
    });
    // ============================================================
});